#!/bin/bash


#  $$$$$$$\             $$\      $$$$$$\  $$\ $$\                           $$$$$$\                       $$\               $$\ $$\                     
#  $$  __$$\            $$ |    $$  __$$\ \__|$$ |                          \_$$  _|                      $$ |              $$ |$$ |                    
#  $$ |  $$ | $$$$$$\ $$$$$$\   $$ /  \__|$$\ $$ | $$$$$$\   $$$$$$$\         $$ |  $$$$$$$\   $$$$$$$\ $$$$$$\    $$$$$$\  $$ |$$ | $$$$$$\   $$$$$$\  
#  $$ |  $$ |$$  __$$\\_$$  _|  $$$$\     $$ |$$ |$$  __$$\ $$  _____|        $$ |  $$  __$$\ $$  _____|\_$$  _|   \____$$\ $$ |$$ |$$  __$$\ $$  __$$\ 
#  $$ |  $$ |$$ /  $$ | $$ |    $$  _|    $$ |$$ |$$$$$$$$ |\$$$$$$\          $$ |  $$ |  $$ |\$$$$$$\    $$ |     $$$$$$$ |$$ |$$ |$$$$$$$$ |$$ |  \__|
#  $$ |  $$ |$$ |  $$ | $$ |$$\ $$ |      $$ |$$ |$$   ____| \____$$\         $$ |  $$ |  $$ | \____$$\   $$ |$$\ $$  __$$ |$$ |$$ |$$   ____|$$ |      
#  $$$$$$$  |\$$$$$$  | \$$$$  |$$ |      $$ |$$ |\$$$$$$$\ $$$$$$$  |      $$$$$$\ $$ |  $$ |$$$$$$$  |  \$$$$  |\$$$$$$$ |$$ |$$ |\$$$$$$$\ $$ |      
#  \_______/  \______/   \____/ \__|      \__|\__| \_______|\_______/       \______|\__|  \__|\_______/    \____/  \_______|\__|\__| \_______|\__|      
#                                                                                                                                                       
#                                                                                                                                                       
#

BASE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export DOTFILES=${BASE}

function create_link {
	if [[ -n $1 ]]
	then
		if [[ ! -f $1 ]] && [[ ! -d $1 ]]
		then
			echo "Must provide a valid file/directory to link from."
			return
		fi

		i=1
		next_token_len=$(echo $1 | cut -d'/' -f$(expr $i + 1)- | wc -m) 
		while [[ $next_token_len -gt 1 ]]
		do		
			i=$(expr $i + 1)
			next_token_len=$(echo $1 | cut -d'/' -f$(expr $i + 1)- | wc -m) 
		done

		file="$(echo $1 | cut -d'/' -f$i-)"
		home_loc="$HOME/."
		if [ -n "${3// /}" ]
		then
			home_loc="$home_loc$3/"
		fi
		home_loc="$home_loc$file"
		
		if [[ -f $home_loc ]] || [[ -d $home_loc ]]
		then
			if [ "$2" == "-v" ]
			then
				echo "$file already linked in $HOME as $home_loc."
			fi
		else
			ln -s $1 $home_loc
			if [[ $? -eq 0 ]]
			then
				echo "Successfully linked $file in $home_loc."
			else
				echo "Could not link $file."
			fi
		fi
	fi
}

verbose="no"
if [ -n "$1" -a "$1" == "-v" ]
then
	verbose="$1"
fi

# vim
# create_link ${BASE}/nvim $verbose config
#ln -s ${BASE}/nvim/init.vm ${BASE}/vim/vimrc
#create_link ${BASE}/vim/vimrc $verbose

# zellij
create_link ${BASE}/zellij $verbose config

# helix
create_link ${BASE}/helix $verbose config

# zsh
create_link ${BASE}/zsh/zshrc $verbose
create_link ${BASE}/zsh/zprofile $verbose
create_link ${BASE}/zsh/zshenv $verbose

# git
create_link ${BASE}/git/gitconfig $verbose

# Xorg
# create_link ${BASE}/xorg/xinitrc $verbose
# create_link ${BASE}/xorg/xprofile $verbose

# kitty
#create_link ${BASE}/kitty $verbose config
# urxvt
# create_link ${BASE}/xorg/Xresources $verbose
# alacritty
create_link ${BASE}/alacritty $verbose config

# i3
#create_link ${BASE}/i3 $verbose config
#create_link ${BASE}/picom $verbose config	# i3 compositor (picom)
# create_link ${BASE}/polybar $verbose config	# Polybar instead of i3bar

# awesome
# create_link ${BASE}/awesome $verbose config
# create_link ${BASE}/picom $verbose config	# awesome compositor (picom)

# Hyprland
create_link ${BASE}/hypr $verbose config

# rofi
create_link ${BASE}/rofi $verbose config

# waybar
create_link ${BASE}/waybar $verbose config

# wal
# create_link ${BASE}/wal $verbose config

# others
# create_link ${BASE}/spicetify $verbose config
create_link ${BASE}/htop $verbose config
create_link ${BASE}/dunst $verbose config
create_link ${BASE}/gnupg/gpg.conf $verbose gnupg
